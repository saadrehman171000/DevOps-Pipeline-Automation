name: CI Pipeline

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch
  pull_request:
    branches:
      - main  # Trigger on pull requests to the main branch

jobs:
  # 1. Build Docker Images for Components
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Check out the code in the repository

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2  # Set up Docker Buildx for building multi-platform images

      - name: Cache Docker Layers
        uses: actions/cache@v3  # Cache Docker layers to speed up builds
        with:
          path: /tmp/.buildx-cache  # Specify cache path
          key: ${{ runner.os }}-docker-${{ github.sha }}  # Cache key
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin  # Log in to DockerHub

      - name: Build Frontend Container
        run: docker build -t saadrehman17100/frontend:latest -f Dockerfile .  # Build the frontend Docker image

      - name: Build Backend Container (if applicable)
        run: docker build -t saadrehman17100/backend:latest -f Dockerfile .  # Build the backend Docker image

      - name: Push Frontend Image to DockerHub
        run: docker push saadrehman17100/frontend:latest  # Push the frontend image to DockerHub

      - name: Push Backend Image to DockerHub
        run: docker push saadrehman17100/backend:latest  # Push the backend image to DockerHub

  # 2. Run Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    needs: build  # Ensure this job runs after the build job
    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Check out the code

      - name: Install Dependencies
        run: npm install  # Install project dependencies

      - name: Run Unit Tests
        run: npm test -- --json --outputFile=test-results.json  # Run tests and output results to a JSON file

      - name: Upload Test Results
        uses: actions/upload-artifact@v3  # Upload test results as artifacts
        with:
          name: test-results  # Artifact name
          path: test-results.json  # Path to the test results file

  # 3. Linter Job (ESLint)
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Check out the code

      - name: Install ESLint
        run: npm install eslint --save-dev  # Install ESLint as a development dependency

      - name: Run ESLint
        run: npx eslint ./ --ext .ts,.tsx --fix  # Run ESLint to check code quality and automatically fix issues

  # 4. SAST Job (Semgrep)
  sast:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Semgrep for Security Analysis
        run: |
          docker run --rm --volume "$PWD:/src" returntocorp/semgrep semgrep --config=p/ci .

  # 5. Slack Notification Job
  notify:
    runs-on: ubuntu-latest
    needs: [build, lint, unit-tests, sast]  # Ensure this runs after the previous jobs
    steps:
      - name: Notify Slack
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "CI Pipeline Notification: All jobs have completed successfully!"
          }' https://hooks.slack.com/services/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
